# apiVersion: v1
# kind: PersistentVolume
# metadata:
  # name: infra-api-rc
  # namespace: rc-daiichi
# spec:
  # capacity:
    # storage: 10Gi
  # accessModes:
    # - ReadWriteMany
  # persistentVolumeReclaimPolicy: Retain
  # mountOptions:
    # - hard
    # - nfsvers=4.1
  # nfs:
    # path: /nfs/deploy/ipos-rc/infra-api_manager
    # server: 20.203.162.8
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
  # name: infra-api
  # namespace: rc-daiichi
# spec:
  # accessModes:
    # - ReadWriteMany
  # resources:
    # requests:
      # storage: 10Gi
# ---
apiVersion: v1
kind: Service
metadata:
  name: infra-api
  namespace: rc-daiichi
  labels:
    app: infra-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 2407
    protocol: TCP
    name: infra-api
  selector:
    app: infra-api
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: infra-api
  namespace: rc-daiichi
  labels:
    app: infra-api
spec:
  selector:
    matchLabels:
      app: infra-api
  serviceName: "infra-api"
  replicas: 1
  template:
    metadata:
      labels:
        app: infra-api
    spec:
      hostAliases:
        - ip: "20.203.162.250"
          hostnames:
          - "daiichi-rc.dxc.com"
      volumes:
      - name: infra-api
        persistentVolumeClaim:
          claimName: rc-deploy
      containers:
      - name: infra-api
        image: ec2-52-220-108-251.ap-southeast-1.compute.amazonaws.com:443/ttran270:ipos-2.0
        imagePullPolicy: IfNotPresent
        env:
          - name: HOST
            value: "daiichi-rc.dxc.com"
          - name: IPOS_SERVICE
            value: "infra-api_manager"
        command: ["/bin/sh"]
        args: ["-c", "openssl s_client -showcerts -connect $HOST:443 -servername $HOST  </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > $HOST.pem; openssl x509 -inform PEM -in $HOST.pem -outform DER -out $HOST.cer; keytool -import -alias $HOST -keystore /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/cacerts -file $HOST.cer -storepass changeit -noprompt; cd $IPOS_SERVICE; java -jar *.jar"]
        resources:
          limits:
            memory: 2Gi
          requests:
            memory: 1Gi
        volumeMounts:
        - mountPath: "/home/ipos"
          name: infra-api
        securityContext:
          privileged: true
        livenessProbe:
          tcpSocket:
            port: 2407
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          tcpSocket:
            port: 2407
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      imagePullSecrets:
      - name: regcred
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: infra-api
  namespace: rc-daiichi
  annotations:
    nginx.ingress.kubernetes.io/app-root: /ipos-api
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - daiichi-rc.dxc.com
    secretName: daiichi-rc
  rules:
    - host: daiichi-rc.dxc.com
      http:
        paths:
        - path: /ipos-api
          backend:
            serviceName: infra-api
            servicePort: 80